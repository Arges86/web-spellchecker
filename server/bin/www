/**
 * @typedef {Object} Message
 * @property {string} site
 * @property {string} dictionary
 * @property {boolean} fast
 */


/**
 * Module dependencies.
 */
const app = require("../app");
const debug = require("debug")("server:server");
const https = require("http");
const WebSocket = require("ws");
const hunspell = require("../commons/hunspell");

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTPS server.
 */
const server = https.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * initialize the WebSocket server instance
 */
const wss = new WebSocket.Server({ server });
wss.on("connection", (ws) => {

  /**
  * Connections is up
  */
  ws.on("message", (message) => {

    /** @type {Message} */
    const parsed = JSON.parse(message);

    let site = parsed.site;
    const dictionary = parsed.dictionary;
    const fast = parsed.fast;

    site = site.replace(/['"]+/g, "");
    if (site.endsWith("/")) {
      site = site.substring(0, site.length - 1);
    }

    hunspell.getSite(site, dictionary, fast)
      .then(response => {
        response.url = site;
        ws.send(JSON.stringify(response));
        hunspell.getUrl(site, response.links, ws, dictionary, fast);
      })
      .catch(() => {
        ws.send(JSON.stringify({ "Error": "Error resolving page" }));
      });
  });

  ws.on("ping", heartbeat);
});

function heartbeat() {
  clearTimeout(this.pingTimeout);
  this.pingTimeout = setTimeout(() => {
    this.terminate();
  }, 30000 + 1000);
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case "EACCES":
    console.error(bind + " requires elevated privileges");
    process.exit(1);
    break;
  case "EADDRINUSE":
    console.error(bind + " is already in use");
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
